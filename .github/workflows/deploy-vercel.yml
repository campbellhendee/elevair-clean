name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      # Prefer repository/organization Secrets; fallback to repository Variables if secrets are unset
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      # Optional: team scope (slug or ID) if your token has access to multiple teams
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}
      # Safe, non-secret defaults confirmed by you (used only if Secrets/Variables are not set)
      DEFAULT_VERCEL_PROJECT_ID: prj_1WGkdUKtLBU5AG6LSYr8HvnIiEl1
      DEFAULT_VERCEL_SCOPE: campbellhendee
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm i -g vercel@latest

      - name: Remove any stale Vercel link (.vercel)
        run: rm -rf .vercel

      - name: Fallback to repo variables when secrets are empty
        # If IDs are not configured as secrets, try repository variables with the same names
        if: env.VERCEL_ORG_ID == '' || env.VERCEL_PROJECT_ID == '' || env.VERCEL_SCOPE == ''
        run: |
          if [ -z "${VERCEL_ORG_ID}" ] && [ -n "${{ vars.VERCEL_ORG_ID }}" ]; then echo "VERCEL_ORG_ID=${{ vars.VERCEL_ORG_ID }}" >> $GITHUB_ENV; fi
          if [ -z "${VERCEL_PROJECT_ID}" ] && [ -n "${{ vars.VERCEL_PROJECT_ID }}" ]; then echo "VERCEL_PROJECT_ID=${{ vars.VERCEL_PROJECT_ID }}" >> $GITHUB_ENV; fi
          if [ -z "${VERCEL_SCOPE}" ] && [ -n "${{ vars.VERCEL_SCOPE }}" ]; then echo "VERCEL_SCOPE=${{ vars.VERCEL_SCOPE }}" >> $GITHUB_ENV; fi
          # If still empty, use your confirmed safe defaults (non-secret)
          if [ -z "${VERCEL_PROJECT_ID}" ] && [ -n "${DEFAULT_VERCEL_PROJECT_ID}" ]; then echo "VERCEL_PROJECT_ID=${DEFAULT_VERCEL_PROJECT_ID}" >> $GITHUB_ENV; fi
          if [ -z "${VERCEL_ORG_ID}" ] && [ -z "${VERCEL_SCOPE}" ] && [ -n "${DEFAULT_VERCEL_SCOPE}" ]; then echo "VERCEL_SCOPE=${DEFAULT_VERCEL_SCOPE}" >> $GITHUB_ENV; fi

      - name: Validate Vercel configuration
        run: |
          missing=""
          [ -z "${VERCEL_TOKEN}" ] && missing="${missing} VERCEL_TOKEN"
          [ -z "${VERCEL_PROJECT_ID}" ] && missing="${missing} VERCEL_PROJECT_ID"
          # Allow using VERCEL_SCOPE (team/user slug) instead of VERCEL_ORG_ID
          if [ -z "${VERCEL_ORG_ID}" ] && [ -z "${VERCEL_SCOPE}" ]; then
            missing="${missing} (VERCEL_ORG_ID or VERCEL_SCOPE)"
          fi
          if [ -n "$missing" ]; then
            echo "::error::Missing required Vercel settings:$missing"
            echo "Ensure these are configured in GitHub (Secrets preferred, or Variables as fallback)."
            echo "Repo Settings → Secrets and variables → Actions"
            exit 1
          fi
          echo "Vercel config present: token ✅, orgId ✅, projectId ✅"

      - name: Link Vercel project (create .vercel/project.json)
        run: |
          mkdir -p .vercel
          # Write project.json; include orgId only if provided
          if [ -n "${VERCEL_ORG_ID}" ]; then
            printf '{\n  "orgId": "%s",\n  "projectId": "%s"\n}\n' "${VERCEL_ORG_ID}" "${VERCEL_PROJECT_ID}" > .vercel/project.json
          else
            printf '{\n  "projectId": "%s"\n}\n' "${VERCEL_PROJECT_ID}" > .vercel/project.json
          fi

      - name: Pull Vercel environment information
        run: |
          SCOPE_ARG=""
          if [ -n "${VERCEL_SCOPE}" ]; then SCOPE_ARG="--scope=${VERCEL_SCOPE}"; fi
          vercel pull --yes --environment=production --project="${VERCEL_PROJECT_ID}" --token="${VERCEL_TOKEN}" ${SCOPE_ARG}

      - name: Build static export (Next.js)
        run: npm run build

      - name: Deploy static out/ to Vercel (Production)
        run: |
          cp -r .vercel ./out/
          cd ./out
          SCOPE_ARG=""
          if [ -n "${VERCEL_SCOPE}" ]; then SCOPE_ARG="--scope=${VERCEL_SCOPE}"; fi
          vercel deploy . --prod --yes --project="${VERCEL_PROJECT_ID}" --token="${VERCEL_TOKEN}" ${SCOPE_ARG}
